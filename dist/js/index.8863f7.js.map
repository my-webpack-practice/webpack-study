{"version":3,"sources":["webpack:///./src/common/js/SL-es.js","webpack:///./src/js/print.js","webpack:///./src/api/log.js","webpack:///./src/api/config.js","webpack:///./src/api/data.js","webpack:///./src/api/index.js","webpack:///./src/js/index.js","webpack:///./src/js/math.js"],"names":["Arr","difference","arr1","arr2","arr","i","len1","length","contains","push","e","upsetArr","sort","Math","random","ua","navigator","userAgent","Browser","wechat","indexOf","weibo","toLowerCase","qq","qqbrowser","getBrowserType","agent","browserType","u","Agents","Array","mobile","v","match","prefixSupport","keyWithPrefix","prefix","key","slice","toUpperCase","isPageVisibilitySupport","support","window","screenX","forEach","undefined","document","isHidden","visibilityState","print","msg","console","log","sendLog","PRODUCTION","url","url1","url2","api","Log","Data","getData","$clickme","$","$txt","on","css","hide","show","$input","$result","text","x","pow","cube","val","Api"],"mappings":"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","file":"js/index.8863f7.js","sourcesContent":["var Arr = {\n  /**\n   * 获取数组1中排除数组2中的值之后的数组\n   * @param  {[type]} arr1 仅包含基本数据类型值的数组1\n   * @param  {[type]} arr2 仅包含基本数据类型值的数组2\n   * @returns 新数组\n   */\n  difference(arr1, arr2) {\n    try {\n      let arr = [];\n      let i = 0;\n      let len1 = arr1.length;\n      for (i = 0; i < len1; i++) {\n        if (!arr2.contains(arr1[i])) {\n          arr.push(arr1[i]);\n        }\n      }\n      return arr;\n    } catch (e) {\n      return arr1;\n    }\n  },\n  /**\n   * 打乱数组\n   * @param  {[type]} arr 目标数组\n   * @return {[type]}     [description]\n   */\n  upsetArr(arr) {\n    return arr.sort(function() {\n      return 0.5 - Math.random();\n    });\n  }\n};\n\nlet ua = navigator.userAgent;\nvar Browser = {\n  wechat: ua.indexOf('MicroMessenger') > -1, // 在微信中打开\n  weibo: ua.toLowerCase().indexOf('weibo') > -1, // 在新浪微博客户端打开\n  qq: ua.indexOf('QQ/') > -1, // 在QQ、QQ空间中打开\n  qqbrowser: ua.indexOf('MQQBrowser') > -1, // 在QQ空间打开\n  /**\n   * browser的判断\n   * @return {[type]} [description]\n   */\n  getBrowserType() {\n    var agent = ua.toLowerCase();\n    var browserType = '';\n    if (agent.indexOf('msie') > 0) {\n      browserType = 'IE';\n    }\n    if (agent.indexOf('firefox') > 0) {\n      browserType = 'firefox';\n    }\n    if (\n      agent.indexOf('chrome') > 0 &&\n      agent.indexOf('mb2345browser') < 0 &&\n      agent.indexOf('360 aphone browser') < 0\n    ) {\n      browserType = 'chrome';\n    }\n    if (\n      agent.indexOf('360 aphone browser') > 0 ||\n      agent.indexOf('qhbrowser') > 0\n    ) {\n      browserType = '360';\n    }\n    if (agent.indexOf('ucbrowser') > 0) {\n      browserType = 'UC';\n    }\n    if (agent.indexOf('micromessenger') > 0) {\n      browserType = 'WeChat';\n    }\n    if (\n      (agent.indexOf('mqqbrowser') > 0 || agent.indexOf('qq') > 0) &&\n      agent.indexOf('micromessenger') < 0\n    ) {\n      browserType = 'QQ';\n    }\n    if (agent.indexOf('miuibrowser') > 0) {\n      browserType = 'MIUI';\n    }\n    if (agent.indexOf('mb2345browser') > 0) {\n      browserType = '2345';\n    }\n    if (agent.indexOf('sogoumobilebrowser') > 0) {\n      browserType = 'sogou';\n    }\n    if (agent.indexOf('liebaofast') > 0) {\n      browserType = 'liebao';\n    }\n    if (agent.indexOf('weibo') > 0) {\n      browserType = 'weibo';\n    }\n    if (\n      agent.indexOf('safari') > 0 &&\n      agent.indexOf('chrome') < 0 &&\n      agent.indexOf('ucbrowser') < 0 &&\n      agent.indexOf('micromessenger') < 0 &&\n      agent.indexOf('mqqbrowser') < 0 &&\n      agent.indexOf('miuibrowser') < 0 &&\n      agent.indexOf('mb2345browser') < 0 &&\n      agent.indexOf('sogoumobilebrowser') < 0 &&\n      agent.indexOf('liebaofast') < 0 &&\n      agent.indexOf('qhbrowser') < 0 &&\n      agent.indexOf('weibo') < 0\n    ) {\n      browserType = 'safari';\n    }\n    return browserType;\n  }\n};\n\nvar Cookie = {\n  /**\n   * 设置cookie\n   * @param name 名称\n   * @param value 值\n   * @param expires 有效时间（单位：小时）（可选） 默认：24h\n   */\n  set(name, value, expires) {\n    const expTimes = expires\n      ? Number(expires) * 60 * 60 * 1000\n      : 24 * 60 * 60 * 1000; // 毫秒\n    const expDate = new Date();\n    expDate.setTime(expDate.getTime() + expTimes);\n    const expString = '; expires=' + expDate.toUTCString();\n    const pathString = '; path=/';\n    document.cookie = name + '=' + encodeURI(value) + expString + pathString;\n  },\n  /**\n   * 读cookie\n   * @param name\n   */\n  get(name) {\n    const cookieStr = '; ' + document.cookie + '; ';\n    const index = cookieStr.indexOf('; ' + name + '=');\n    if (index !== -1) {\n      let s = cookieStr.substring(index + name.length + 3, cookieStr.length);\n      return decodeURI(s.substring(0, s.indexOf('; ')));\n    } else {\n      return null;\n    }\n  },\n  /**\n   * 删除cookie\n   * @param name\n   */\n  del(name) {\n    const exp = new Date(new Date().getTime() - 1);\n    const s = this.get(name);\n    if (s !== null) {\n      document.cookie =\n        name + '=' + s + '; expires=' + exp.toUTCString() + '; path=/';\n    }\n  }\n};\n\nvar DateTime = {\n  /**\n   * 字符串转换成时间戳（毫秒）\n   * @param  {string} str 时间字符串（格式：yyyy-MM-dd HH:mm 或 yyyy/MM/dd HH:mm）\n   * 注意：iphone不支持（格式：2016-02-26 09:12）需要转换成：（格式：2016/02/26 09:12）\n   * @return {number}     [description]\n   */\n  strToTimestamp: function(str) {\n    return Date.parse(str.replace(/-/g, '/'));\n  },\n  strToDate: function(str) {\n    return new Date(str.replace(/-/g, '/'));\n  },\n  /**\n   * 时间戳转换为字符串\n   * @param  {[type]} t 时间戳\n   * @param  {[type]} splitStr 分隔符\n   * @return {[type]}   [description]\n   */\n  timestampToDateStr: function(t, splitStr) {\n    return this.dateToString(this.timestampToDate(t), splitStr);\n  },\n\n  /**\n   * 时间戳转日期时间\n   * @param  {[type]} t 时间戳\n   * @return {[type]}   日期时间\n   */\n  timestampToDate: function(t) {\n    return new Date(t);\n  },\n\n  /**\n   * 日期转字符串（默认不带年份）\n   * @param  {[type]} d           日期时间\n   * @param  {[type]} splitStr 分隔符\n   * @return {[type]}             默认返回 MM-dd HH:mm\n   */\n  dateToString(d, splitStr, withYear = false) {\n    var year = d.getFullYear().toString(),\n      month = (d.getMonth() + 1).toString(),\n      day = d.getDate().toString(),\n      h = d.getHours().toString(),\n      m = d.getMinutes().toString();\n    month = month.length > 1 ? month : '0' + month;\n    day = day.length > 1 ? day : '0' + day;\n    h = h.length > 1 ? h : '0' + h;\n    m = m.length > 1 ? m : '0' + m;\n    var str =\n      (withYear ? year + '-' : '') + month + '-' + day + ' ' + h + ':' + m; // MM-dd HH:mm\n    if (splitStr) {\n      str = str.replace(/-/g, splitStr);\n    }\n    return str;\n  },\n\n  /**\n   * 日期转字符串(带年份)\n   * @param  {Date} d           日期时间\n   * @param  {string} splitStr 分隔符\n   * @return {string}             默认返回 yyyy-MM-dd HH:mm\n   */\n  dateToStringWithYear: function(d, splitStr) {\n    return this.dateToString(d, splitStr, true);\n  },\n  /**\n   * 计算指定时间与当前时间的时间差 并转换成相应格式字符串\n   * 如：xx分钟前，xx小时前，昨天 HH:mm，前天 HH:mm，MM-dd HH:mm\n   * @param  {string} str 时间字符串（格式：2016-02-26 09:12）\n   * @return {string}\n   */\n  getSpecialTimeStr: function(str) {\n    const targetDate = this.strToDate(str);\n    const targetTime = targetDate.getTime();\n    const targetGetDate = targetDate.getDate();\n    const currentDate = new Date();\n    const currentTime = currentDate.getTime();\n    const currentGetDate = currentDate.getDate();\n    if (!targetTime) {\n      return false;\n    }\n\n    const tdoa = Number(currentTime - targetTime),\n      dayTime = 24 * 60 * 60 * 1000, // 1天\n      hourTime = 60 * 60 * 1000, // 1小时\n      minuteTime = 60 * 1000; // 1分钟\n\n    // 天\n    const h = tdoa / dayTime;\n    if (h < 2) {\n      if (currentGetDate - targetGetDate === 1) {\n        return '昨天';\n      } else if (currentGetDate - targetGetDate === 2) {\n        return '前天';\n      } else if (currentGetDate - targetGetDate === 0) {\n        if (tdoa >= hourTime) {\n          // 小时\n          return Math.floor(tdoa / hourTime) + '小时前';\n        } else if (tdoa >= minuteTime) {\n          return Math.floor(tdoa / minuteTime) + '分钟前';\n        } else {\n          return '最新';\n          // return Math.floor(tdoa / 1000) + '秒前';\n        }\n      }\n    } else if (h >= 2 && h < 3 && currentGetDate - targetGetDate === 2) {\n      return '前天';\n    } else {\n      return this.dateToString(targetDate);\n    }\n  },\n  /**\n   * 秒转成时间字符串\n   * @param  {Number}  seconds 秒[必需]\n   * @param  {Boolean} hasHour 是否需要区分小时[可选]\n   * @return {String}          hasHour[true]: hh:mm:ss；否则[默认]：mm:ss。\n   */\n  secondsToTimestr(seconds, hasHour = false) {\n    var hh, mm, ss;\n    // 传入的时间为空或小于0\n    if (seconds == null || seconds < 0) {\n      return;\n    }\n    seconds = Math.ceil(seconds);\n    // 得到小时\n    hh = parseInt(seconds / 3600) | 0;\n    seconds = parseInt(seconds) - hh * 3600;\n    if (hh < 10) {\n      hh = '0' + hh;\n    }\n    // 得到分\n    mm = (seconds / 60) | 0;\n    if (parseInt(mm) < 10) {\n      mm = '0' + mm;\n    }\n    // 得到秒\n    ss = parseInt(seconds) - mm * 60;\n    if (ss < 10) {\n      ss = '0' + ss;\n    }\n    if (hasHour) {\n      return hh + ':' + mm + ':' + ss;\n    }\n    return mm + ':' + ss;\n  },\n  /**\n   * 时间戳转成时间字符串\n   * @param  {Number}  seconds 时间戳[必需]\n   * @param  {Boolean} hasHour 是否需要区分小时[可选]\n   * @return {String}          hasHour[true]: hh:mm:ss；否则[默认]：mm:ss。\n   */\n  timestampToTimestr: function(ts, hasHour) {\n    var seconds = ts ? Number(ts) / 1000 : 0;\n    seconds = parseInt(seconds) % (60 * 60 * 24) + 8 * 60 * 60; //北京时间东八区加八个小时\n    return this.secondsToTimestr(seconds, hasHour);\n  }\n};\n\nvar Html = {\n  /**\n   * 动态加载js文件\n   * @param  {string}   url      js文件的url地址\n   * @param  {Function} callback 加载完成后的回调函数\n   */\n  getScript(url, callback, element) {\n    var head = document.getElementsByTagName('head')[0],\n      js = document.createElement('script');\n\n    js.setAttribute('type', 'text/javascript');\n    js.setAttribute('src', url);\n    if (element) {\n      element.appendChild(js);\n    } else {\n      head.appendChild(js);\n    }\n    //执行回调\n    var callbackFn = function() {\n      if (typeof callback === 'function') {\n        callback();\n      }\n    };\n\n    if (document.all) {\n      // IE\n      js.onreadystatechange = function() {\n        if (js.readyState === 'loaded' || js.readyState === 'complete') {\n          callbackFn();\n        }\n      };\n    } else {\n      js.onload = function() {\n        callbackFn();\n      };\n    }\n  },\n  /**\n   * 动态创建广告代码\n   * @param  {string}   scriptCode     脚本代码\n   * @param  {Function} callback   回调\n   * @param  {DOM}   element  js代码父级标签\n   * @return {undefined}\n   */\n  createScript(scriptCode, callback, element) {\n    if (scriptCode) {\n      var head = document.getElementsByTagName('head')[0],\n        js = document.createElement('script');\n      js.setAttribute('type', 'text/javascript');\n      js.innerHTML = scriptCode;\n      if (element) {\n        element.appendChild(js);\n      } else {\n        head.appendChild(js);\n      }\n      //执行回调\n      callback();\n    }\n  },\n  /**\n   * 动态加载css\n   * @param  {String} style css代码\n   * @param {Function} callback css代码加载成功后的回调函数\n   * @param {DOM} element DOM节点\n   */\n  createStyle(style, callback, element) {\n    if (style) {\n      var head = document.getElementsByTagName('head')[0],\n        css = document.createElement('style');\n      css.innerHTML = style;\n      if (element) {\n        element.appendChild(css);\n      } else {\n        head.appendChild(css);\n      }\n      //执行回调\n      callback && callback();\n    }\n  },\n  /**\n   * 过滤html标签\n   * @param  {String} str 源字符串\n   * @return {String}     过滤之后的字符串\n   */\n  filterHtmlTags(str) {\n    if (!str || typeof str !== 'string') {\n      return '';\n    }\n    return str.replace(/<\\/?[^>]*>/g, '');\n  },\n  /**\n   * 获取滚动高度\n   * @return {[type]} [description]\n   */\n  getScrollTop() {\n    var scrollTop = 0,\n      bodyScrollTop = 0,\n      documentScrollTop = 0;\n    try {\n      if (document.body) {\n        bodyScrollTop = document.body.scrollTop;\n      }\n      if (document.documentElement) {\n        documentScrollTop = document.documentElement.scrollTop;\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    scrollTop =\n      bodyScrollTop - documentScrollTop > 0 ? bodyScrollTop : documentScrollTop;\n    return scrollTop;\n  }\n};\n\nvar Num = {\n  /**\n   * 对数量进行处理，过万的数据显示“xxx万”（xxx：向上取整, 如：10.2万以及10.9万 都会转化成 11万）\n   * @param  {String|Number} num 数量\n   * @return {String}    处理后的数据\n   */\n  getSpecialCountStr(num) {\n    if (typeof num !== 'string' && typeof num !== 'number') {\n      return num;\n    }\n    num = parseInt(num, 10);\n    if (num > 9999) {\n      return Math.ceil(num / 10000) + '万';\n    }\n    return '' + num;\n  }\n};\n\nlet u = navigator.userAgent,\n  Agents = new Array(\n    'Android',\n    'iPhone',\n    'SymbianOS',\n    'Windows Phone',\n    'iPad',\n    'iPod'\n  ),\n  mobile = false;\nfor (let v = 0; v < Agents.length; v++) {\n  if (u.indexOf(Agents[v]) > -1) {\n    mobile = true;\n    break;\n  }\n}\n\nvar Os = {\n  //移动终端浏览器版本信息\n  mobile: mobile, //是否为移动终端\n  ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端\n  android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, //android终端\n  iphone: u.indexOf('iPhone') > -1, //是否为iPhone或者QQHD浏览器\n  ipad: u.indexOf('iPad') > -1, //是否iPad\n  /**\n   * OS的判断\n   * @return {[type]} [description]\n   */\n  getOsType() {\n    var agent = navigator.userAgent.toLowerCase(),\n      osType = '',\n      index = '',\n      version = '';\n    if (/android/i.test(navigator.userAgent)) {\n      index = agent.indexOf('android');\n      version = agent.substr(index + 8, 3);\n      osType = 'Android ' + version;\n    }\n    if (/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent)) {\n      index = agent.indexOf('os');\n      version = agent.substr(index + 3, 4);\n      osType = 'iOS ' + version;\n    }\n    if (\n      /Linux/i.test(navigator.userAgent) &&\n      !/android/i.test(navigator.userAgent) &&\n      !/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent)\n    ) {\n      osType = 'Linux';\n    }\n    if (/windows|win32/i.test(navigator.userAgent)) {\n      osType = 'windows32';\n    }\n    if (/windows|win64/i.test(navigator.userAgent)) {\n      osType = 'windows64';\n    }\n    return osType;\n  }\n};\n\nvar prefixSupport,\n  keyWithPrefix = function(prefix, key) {\n    if (prefix !== '') {\n      // 首字母大写\n      return prefix + key.slice(0, 1).toUpperCase() + key.slice(1);\n    }\n    return key;\n  };\nvar isPageVisibilitySupport = (function() {\n  var support = false;\n  if (typeof window.screenX === 'number') {\n    ['webkit', 'moz', 'ms', 'o', ''].forEach(function(prefix) {\n      if (\n        support === false &&\n        document[keyWithPrefix(prefix, 'hidden')] !== undefined\n      ) {\n        prefixSupport = prefix;\n        support = true;\n      }\n    });\n  }\n  return support;\n})();\n\nvar isHidden = function() {\n  if (isPageVisibilitySupport) {\n    return document[keyWithPrefix(prefixSupport, 'hidden')];\n  }\n  return undefined;\n};\n\nvar visibilityState = function() {\n  if (isPageVisibilitySupport) {\n    return document[keyWithPrefix(prefixSupport, 'visibilityState')];\n  }\n  return undefined;\n};\n\nvar PageVisibility = {\n  hidden: isHidden(),\n  visibilityState: visibilityState(),\n  visibilitychange: function(fn, usecapture) {\n    usecapture = false;\n    if (isPageVisibilitySupport && typeof fn === 'function') {\n      return document.addEventListener(\n        prefixSupport + 'visibilitychange',\n        function(evt) {\n          this.hidden = isHidden();\n          this.visibilityState = visibilityState();\n          fn.call(this, evt);\n        }.bind(this),\n        usecapture\n      );\n    }\n    return undefined;\n  }\n};\n\nvar Str = {\n  /**\n   * 去掉空格\n   * @param {string} str 目标字符串\n   * @param {number} pos 可选 0: 去掉所有空格；1：去掉字符串前面空格；2：去掉字符串后面空格；默认：去掉字符串前后空格。\n   */\n  trim(str, pos) {\n    switch (pos) {\n      case 0:\n        return str.replace(/\\s+/g, '');\n      case 1:\n        return str.replace(/(^\\s*)/g, '');\n      case 2:\n        return str.replace(/(\\s*$)/g, '');\n      default:\n        return str.replace(/(^\\s*)|(\\s*$)/g, '');\n    }\n  },\n  /**\n   * 获取字符串字节数\n   * @param  {string} str 目标字符串\n   * @return {number}     字节数\n   */\n  getBytes: function(str) {\n    var byteLen = 0,\n      len = str.length;\n    if (str) {\n      for (var i = 0; i < len; i++) {\n        if (str.charCodeAt(i) > 255) {\n          byteLen += 2;\n        } else {\n          byteLen++;\n        }\n      }\n      return byteLen;\n    } else {\n      return 0;\n    }\n  },\n\n  /**\n   * 版本号比较\n   * @param {string} v1 版本号1\n   * @param {string} v2 版本号2\n   * @returns 返回1，表示大于；返回-1，表示小于；返回0，表示等于。\n   * @link https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html?search-key=compareversion\n   * @example\n   * compareVersion('1.11.0', '1.9.9'); // 1\n   */\n  compareVersion: function(v1, v2) {\n    v1 = v1.split('.');\n    v2 = v2.split('.');\n    var len = Math.max(v1.length, v2.length);\n\n    while (v1.length < len) {\n      v1.push('0');\n    }\n    while (v2.length < len) {\n      v2.push('0');\n    }\n\n    for (var i = 0; i < len; i++) {\n      var num1 = parseInt(v1[i]);\n      var num2 = parseInt(v2[i]);\n\n      if (num1 > num2) {\n        return 1;\n      } else if (num1 < num2) {\n        return -1;\n      }\n    }\n\n    return 0;\n  }\n};\n\nvar Url = {\n  /**\n   * 特定字符串转换成object对象\n   * @param {string} str 目标字符串\n   * @example\n      a=Hello&b=lizhigao&c=0&d=123&e=null\n      =>\n      {\n        a: 'Hello',\n        b: 'lizhigao',\n        c: 0,\n        d: 123,\n        e: null\n      }\n   */\n  parse(str) {\n    if (str === undefined || str === '') {\n      return {};\n    }\n    let obj = {};\n    let arr = str.split('&');\n    arr.map(value => {\n      obj[value.split('=')[0]] = value.split('=')[1] || '';\n    });\n    return obj;\n  },\n  parseQueryString() {\n    const str = location.search.length ? location.search.slice(1) : '';\n    // const str = 'qid=null&idx=1&recommendtype=-1&ishot=1&fr=toutiao&pgnum=1';\n    return this.parse(str);\n  },\n  /**\n   * 将obj对象转换成“&”符号连接的字符串\n   * @param {object} obj json对象（暂时只支持基本类型不支持嵌套对象和数组）\n   * @example\n   *  {\n        a: 'Hello',\n        b: 'lizhigao',\n        c: 0,\n        d: 123,\n        e: null\n      }\n      =>\n      a=Hello&b=lizhigao&c=0&d=123&e=null\n   *\n   */\n  stringify(obj) {\n    return obj\n      ? Object.keys(obj)\n          .map(key => {\n            const value = obj[key];\n            if (value === undefined) {\n              return '';\n            }\n            return encodeURI(key) + '=' + encodeURI(value);\n          })\n          .filter(x => x.length > 0)\n          .join('&')\n      : '';\n  },\n  /**\n   * 获取url中参数的值\n   * @param  {string} name 参数名\n   * @return {string}      参数值，默认返回空字符串''\n   */\n  getQueryString(name) {\n    var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i');\n    var r = window.location.search.substr(1).match(reg);\n    if (r != null) return decodeURI(r[2]);\n    return '';\n  },\n  /**\n   * 获取页面来源(referer)\n   * @link http://www.au92.com/archives/javascript-get-referer.html\n   */\n  getReferrer() {\n    let referrer = '';\n    try {\n      referrer = window.top.document.referrer;\n    } catch (e) {\n      if (window.parent) {\n        try {\n          referrer = window.parent.document.referrer;\n        } catch (e2) {\n          referrer = '';\n        }\n      }\n    }\n    if (referrer === '') {\n      referrer = document.referrer;\n    }\n    return referrer;\n  },\n  /**\n   * 获取url（排除url中参数）\n   */\n  getUrlNoParams() {\n    let locaUrl = window.location.href,\n      endIndex = 0;\n    if (locaUrl.indexOf('?') >= 0) {\n      endIndex = locaUrl.indexOf('?');\n      return locaUrl.substring(0, endIndex);\n    }\n    if (locaUrl.indexOf('#') >= 0) {\n      endIndex = locaUrl.indexOf('#');\n      return locaUrl.substring(0, endIndex);\n    }\n    return locaUrl;\n  }\n};\n\nvar Util = {\n  /**\n   * 生成唯一id（当前时间戳13位+4位数随机数）\n   * @returns {string} 17位数字组成的字符串\n   */\n  getUid: function() {\n    return (\n      +new Date() +\n      Math.random()\n        .toString(10)\n        .substring(2, 6)\n    );\n  },\n  /**\n   * 获取随机数\n   * @param  {number} min 随机数下限\n   * @param  {number} max 随机数上限\n   * @returns 大于等于min且小于max的数\n   */\n  getRandom: function(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n  },\n  isNumber: function(s) {\n    return !isNaN(s);\n  },\n  isString: function(s) {\n    return typeof s === 'string';\n  },\n  isBoolean: function(s) {\n    return typeof s === 'boolean';\n  },\n  isFunction: function(s) {\n    return typeof s === 'function';\n  },\n  isNull: function(s) {\n    return s === null;\n  },\n  isUndefined: function(s) {\n    return typeof s === 'undefined';\n  },\n  isEmpty: function(s) {\n    return /^\\s*$/.test(s);\n  },\n  isArray: function(s) {\n    return s instanceof Array;\n  }\n};\n\nvar index = {\n  Arr,\n  Browser,\n  Cookie,\n  DateTime,\n  Html,\n  Num,\n  Os,\n  PageVisibility,\n  Str,\n  Url,\n  Util\n};\n\nexport default index;\nexport { Arr, Browser, Cookie, DateTime, Html, Num, Os, PageVisibility, Str, Url, Util };\n","import SL, { Arr, Browser } from '../common/js/SL-es';\n\nconst testTS = () => {\n  // console.log(SL);\n  console.log(Arr);\n  console.log(Browser);\n  // console.log(Str);\n};\n\nexport default msg => {\n  console.log(msg);\n  testTS();\n};\n","function sendLog() {\n  console.log('sent log...');\n  return 'Yes!';\n}\nexport { sendLog };\nexport default {\n  sendLog\n};\n","console.log('PRODUCTION', PRODUCTION);\n\nexport const url = {\n  url1: PRODUCTION\n    ? 'https://api.eastday.com/url1'\n    : 'https://testapi.eastday.com/url1',\n  url2: PRODUCTION\n    ? 'https://api.eastday.com/url2'\n    : 'https://testapi.eastday.com/url2'\n};\n","import { url } from './config';\n\nfunction getData() {\n  return url;\n}\nexport { getData };\nexport default {\n  getData\n};\n","import Log from './log';\nimport Data from './data';\nexport { Log, Data };\nexport default {\n  Log,\n  Data\n};\n","import '../css/index.scss';\nimport $ from 'zepto-webpack';\nimport { cube } from './math';\nimport print from './print';\nimport Api from '../api';\n\nconst $clickme = $('#clickme');\nconst $txt = $('#txt');\n\n$clickme.on('click', function() {\n  if ($txt.css('display') !== 'none') {\n    $txt.hide();\n    print('txt is hide!');\n  } else {\n    $txt.show();\n    print('txt is hide!');\n  }\n});\n\nconst $input = $('#J_input');\nconst $result = $('#J_result');\nconst $square = $('#J_square');\nconst $cube = $('#J_cube');\n\n// $square.on('click', () => {\n//   $result.text(square($input.val()));\n// });\n$cube.on('click', () => {\n  $result.text(cube($input.val()));\n});\n\nconsole.log('==================检查环境====================');\nconsole.log('环境不同，结果不同：', Api.Data.getData());\n\nconsole.log('===================检查日志===================');\nconsole.log('发送日志了吗？', Api.Log.sendLog());\n","export function square(x) {\n  return x ** 2;\n}\n\nexport function cube(x) {\n  return x ** 3;\n}\n"],"sourceRoot":""}